#!/usr/bin/env bash

# stop script when a command returns with non-zero
set -e

# important names
fpath=""
fname=""
basename=""
build_dir="_pml_build"
builtins_ar="pml_builtins.a"
stdlib_dir="stdlib"

# get tools
POCAML="dune exec -- bin/main.exe"
LLC=llc
CC=cc

usage()
{
  printf "usage: pocamlc [-c] [-d] [-r] [-h] [-f <path_to_pml_file>]"
  printf
  printf "options:"
  printf "-c	Clean C object files from previous build before rebuild."
  printf "-d	Compile Pocaml C builtins with debugging information."
  printf "-r	Run the executable after compilation."
  printf "-h	Display pocamlc usage."
}

CLEAN_PREV_BUILD=false
RUN_AFTER_COMPILATION=false
POCAMLC_FLAGS=""

[[ $* ]] || { usage; exit 1; }

# parse options and argument
while getopts 'cdrf:h' opt; do
  case $opt in
    c) CLEAN_PREV_BUILD=true;;
    d) POCAMLC_FLAGS+=" -D BUILTIN_DEBUG" ;;
    r) RUN_AFTER_COMPILATION=true;;
    f) fpath=$OPTARG;
       fname=${fpath##*/}
       basename="${fname%.*}" ;;
    h | *) usage
       exit ;;
  esac
done

# create build_dir
rm -rf $build_dir
mkdir $build_dir

# if '-f' specified, copy source file to build_dir
# else, get input from stdin
if [[ $fpath ]]; then
  cp ${fpath} ${build_dir}/${fname}.orig
else
  fname="a.pml"
  fpath=${build_dir}/${fname}
  basename="${fname%.*}"
  cat > $fpath.orig
fi

# prepend stdlib
fname_with_stdlib=${build_dir}/${fname}
touch $fname_with_stdlib
for stdlib_file in ${stdlib_dir}/**; do
  { printf "(* pocamlc: %s *)\n" $stdlib_file;
    cat $stdlib_file;
    printf "\n" >> $fname_with_stdlib;
  } >> $fname_with_stdlib
done
{ printf "(* pocamlc: %s *)\n" $fname;
  cat ${build_dir}/${fname}.orig
} >> $fname_with_stdlib

# pocaml -> llvm
$POCAML -c ${build_dir}/${fname} > ${build_dir}/${basename}.ll

# build builtins C static library
cd builtins
[ "$CLEAN_PREV_BUILD" = true ] && make clean
make PML_CFLAGS="${POCAMLC_FLAGS}"
cp ${builtins_ar} ../${build_dir}
cd ..

# link the generated llvm with builtin
cd ${build_dir}
$LLC -relocation-model=pic ${basename}.ll > ${basename}.s
$CC -o ${basename}.exe ${basename}.s ${builtins_ar}

# if '-r' specified, execute
[ "$RUN_AFTER_COMPILATION" = true ] && ./${basename}.exe

# exit successfully
exit 0
